name: Deploy Complete Coder Environment

# Set minimal required permissions for security
permissions:
  contents: read       # Access repository code
  issues: write        # Create deployment failure issues
  pull-requests: write # Comment on PRs with deployment status
  actions: read        # Download/upload artifacts
  id-token: write      # For OIDC authentication if needed

on:
  workflow_dispatch:
    inputs:
      bucket_name:
        description: 'Name of the bucket in object store that will hold Terraform state'
        required: false
        type: string
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      region:
        description: 'Scaleway region'
        required: true
        type: choice
        options:
          - fr-par
          - nl-ams
          - pl-waw
        default: 'fr-par'
      availability_zone:
        description: 'Scaleway availibility zone (which should be within region)'
        required: true
        type: choice
        options:
          - fr-par-1
          - fr-par-2
          - fr-par-3
          - nl-ams-1
          - nl-ams-2
          - nl-ams-3
          - pl-waw-1
          - pl-waw-2
          - pl-waw-3
        default: 'fr-par-1'
      template:
        description: 'Workspace template to deploy (leave empty to skip)'
        required: false
        type: string
      domain_name:
        description: 'Domain name for SSL certificates (leave empty for IP-based access)'
        required: false
        type: string
      subdomain:
        description: 'Subdomain prefix (defaults: dev=coder-dev, staging=coder-staging, prod=coder)'
        required: false
        type: string
      enable_monitoring:
        description: 'Enable monitoring stack'
        required: false
        type: boolean
        default: false
      dry_run:
        description: 'Preview changes without applying'
        required: false
        type: boolean
        default: false
      skip_coder_deployment:
        description: 'Deploy infrastructure only (skip Coder application)'
        required: false
        type: boolean
        default: false

  # Allow manual PR triggers for staging deployments
  pull_request:
    types: [opened, synchronize, labeled]
    paths:
      - 'environments/**'
      - 'modules/**'
      - 'templates/**'
      - 'scripts/**'
      - '.github/workflows/deploy-*.yml'

  # Auto-deploy on push to main for staging
  push:
    branches: [main]
    paths:
      - 'environments/staging/**'
      - 'modules/**'

jobs:
  determine-strategy:
    name: Determine Deployment Strategy
    runs-on: ubuntu-latest
    outputs:
      deploy_env: ${{ steps.determine-env.outputs.environment }}
      deploy_template: ${{ steps.determine-env.outputs.template }}
      deploy_domain: ${{ steps.determine-env.outputs.domain_name }}
      deploy_subdomain: ${{ steps.determine-env.outputs.subdomain }}
      enable_monitoring: ${{ steps.determine-env.outputs.enable_monitoring }}
      skip_coder: ${{ steps.determine-env.outputs.skip_coder }}
      dry_run: ${{ steps.determine-env.outputs.dry_run }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Determine Deployment Strategy
        id: determine-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "template=${{ github.event.inputs.template }}" >> $GITHUB_OUTPUT
            echo "domain_name=${{ github.event.inputs.domain_name }}" >> $GITHUB_OUTPUT
            echo "subdomain=${{ github.event.inputs.subdomain }}" >> $GITHUB_OUTPUT
            echo "enable_monitoring=${{ github.event.inputs.enable_monitoring }}" >> $GITHUB_OUTPUT
            echo "skip_coder=${{ github.event.inputs.skip_coder_deployment }}" >> $GITHUB_OUTPUT
            echo "dry_run=${{ github.event.inputs.dry_run }}" >> $GITHUB_OUTPUT

          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ contains(github.event.pull_request.labels.*.name, 'deploy-staging') }}" == "true" ]]; then
              echo "environment=staging" >> $GITHUB_OUTPUT
              echo "template=" >> $GITHUB_OUTPUT
              echo "domain_name=" >> $GITHUB_OUTPUT
              echo "subdomain=" >> $GITHUB_OUTPUT
              echo "enable_monitoring=false" >> $GITHUB_OUTPUT
              echo "skip_coder=false" >> $GITHUB_OUTPUT
              echo "dry_run=false" >> $GITHUB_OUTPUT
            else
              echo "Skip deployment for this PR"
              exit 0
            fi

          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "template=" >> $GITHUB_OUTPUT
            echo "domain_name=" >> $GITHUB_OUTPUT
            echo "subdomain=" >> $GITHUB_OUTPUT
            echo "enable_monitoring=true" >> $GITHUB_OUTPUT
            echo "skip_coder=false" >> $GITHUB_OUTPUT
            echo "dry_run=false" >> $GITHUB_OUTPUT
          fi

      - name: Display Deployment Plan
        run: |
          echo "🚀 Complete Environment Deployment Plan"
          echo "========================================"
          echo ""
          echo "📋 Deployment Configuration:"
          echo "  Environment: ${{ steps.determine-env.outputs.environment }}"
          echo "  Template: ${{ steps.determine-env.outputs.template || 'None specified' }}"
          echo "  Domain: ${{ steps.determine-env.outputs.domain_name || 'IP-based access' }}"
          echo "  Subdomain: ${{ steps.determine-env.outputs.subdomain || 'Auto-generated' }}"
          echo "  Monitoring: ${{ steps.determine-env.outputs.enable_monitoring }}"
          echo "  Skip Coder: ${{ steps.determine-env.outputs.skip_coder }}"
          echo "  Dry Run: ${{ steps.determine-env.outputs.dry_run }}"
          echo ""
          echo "🔄 Deployment Phases:"
          echo "  Phase 1: Infrastructure (cluster, database, networking, security)"
          echo "  Phase 2: Coder Application ${{ steps.determine-env.outputs.skip_coder == 'true' && '⏭️ SKIPPED' || '✅ INCLUDED' }}"
          echo ""
          echo "⚡ Benefits of Two-Phase Deployment:"
          echo "  • Infrastructure failures don't block cluster access"
          echo "  • Coder deployment can be retried independently"
          echo "  • Better troubleshooting with immediate kubeconfig access"
          echo "  • Cleaner separation of concerns"

  deploy-infrastructure:
    name: Deploy Infrastructure (Phase 1)
    needs: determine-strategy
    if: needs.determine-strategy.outputs.deploy_env != ''
    uses: ./.github/workflows/deploy-infrastructure.yml
    with:
      bucket_name: ${{ github.event.inputs.bucket_name }}
      environment: ${{ needs.determine-strategy.outputs.deploy_env }}
      region: ${{ github.event.inputs.region }}
      availability_zone: ${{ github.event.inputs.availability_zone }}
      domain_name: ${{ needs.determine-strategy.outputs.deploy_domain }}
      subdomain: ${{ needs.determine-strategy.outputs.deploy_subdomain }}
      auto_approve: true
      dry_run: ${{ needs.determine-strategy.outputs.dry_run == 'true' }}
    secrets: inherit

  deploy-coder:
    name: Deploy Coder Application (Phase 2)
    needs: [determine-strategy, deploy-infrastructure]
    if: needs.determine-strategy.outputs.deploy_env != '' && needs.determine-strategy.outputs.skip_coder != 'true' && needs.deploy-infrastructure.result == 'success'
    uses: ./.github/workflows/deploy-coder.yml
    with:
      bucket_name: ${{ github.event.inputs.bucket_name }}
      environment: ${{ needs.determine-strategy.outputs.deploy_env }}
      region: ${{ github.event.inputs.region }}
      availability_zone: ${{ github.event.inputs.availability_zone }}
      template: ${{ needs.determine-strategy.outputs.deploy_template }}
      kubeconfig_source: 'from_infrastructure_run'
      infrastructure_run_id: ${{ github.run_id }}
      auto_approve: true
      dry_run: ${{ needs.determine-strategy.outputs.dry_run == 'true' }}
    secrets: inherit

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [determine-strategy, deploy-infrastructure, deploy-coder]
    if: always() && needs.determine-strategy.outputs.deploy_env != ''
    permissions:
      contents: read        # Read repository information
      pull-requests: write  # Comment on PRs with deployment status
      issues: write         # Create issues on deployment failure

    steps:
      - name: Evaluate Deployment Results
        id: evaluate
        run: |
          infrastructure_result="${{ needs.deploy-infrastructure.result }}"
          coder_result="${{ needs.deploy-coder.result }}"
          skip_coder="${{ needs.determine-strategy.outputs.skip_coder }}"

          echo "🔍 Evaluating deployment results..."
          echo "Infrastructure (Phase 1): $infrastructure_result"
          echo "Coder (Phase 2): $coder_result"
          echo "Skip Coder: $skip_coder"

          # Determine overall status
          if [[ "$infrastructure_result" == "success" ]]; then
            if [[ "$skip_coder" == "true" ]]; then
              overall_status="success"
              deployment_type="Infrastructure Only"
              status_emoji="🏗️"
              status_message="Infrastructure deployment completed successfully"
            elif [[ "$coder_result" == "success" ]]; then
              overall_status="success"
              deployment_type="Complete Environment"
              status_emoji="🎉"
              status_message="Complete environment deployment successful"
            elif [[ "$coder_result" == "failure" ]]; then
              overall_status="partial"
              deployment_type="Infrastructure Only (Coder Failed)"
              status_emoji="⚠️"
              status_message="Infrastructure deployed, but Coder application failed"
            else
              overall_status="partial"
              deployment_type="Infrastructure Only (Coder Skipped/Cancelled)"
              status_emoji="🏗️"
              status_message="Infrastructure deployed, Coder deployment not completed"
            fi
          else
            overall_status="failure"
            deployment_type="Failed"
            status_emoji="❌"
            status_message="Infrastructure deployment failed"
          fi

          echo "overall_status=$overall_status" >> $GITHUB_OUTPUT
          echo "deployment_type=$deployment_type" >> $GITHUB_OUTPUT
          echo "status_emoji=$status_emoji" >> $GITHUB_OUTPUT
          echo "status_message=$status_message" >> $GITHUB_OUTPUT

      - name: Display Deployment Summary
        run: |
          echo "${{ steps.evaluate.outputs.status_emoji }} Deployment Summary"
          echo "=============================="
          echo ""
          echo "📋 Final Status: ${{ steps.evaluate.outputs.status_message }}"
          echo "🏷️  Deployment Type: ${{ steps.evaluate.outputs.deployment_type }}"
          echo "🌍 Environment: ${{ needs.determine-strategy.outputs.deploy_env }}"
          echo ""
          echo "📊 Phase Results:"
          echo "  Phase 1 (Infrastructure): ${{ needs.deploy-infrastructure.result }}"
          echo "  Phase 2 (Coder): ${{ needs.deploy-coder.result || 'skipped' }}"
          echo ""

          if [[ "${{ steps.evaluate.outputs.overall_status }}" == "success" ]]; then
            if [[ "${{ needs.determine-strategy.outputs.skip_coder }}" == "true" ]]; then
              echo "🎯 Infrastructure Ready!"
              echo "  • Kubernetes cluster deployed and accessible"
              echo "  • Database and networking configured"
              echo "  • Security policies applied"
              echo "  • Kubeconfig available for Coder deployment"
              echo ""
              echo "📝 Next Steps:"
              echo "  • Run 'Deploy Coder Application' workflow to complete setup"
              echo "  • Or deploy manually using kubectl with provided kubeconfig"
            else
              echo "🎉 Complete Environment Ready!"
              echo "  • Full infrastructure deployed"
              echo "  • Coder application running"
              echo "  • Ready for workspace creation"
              echo ""
              echo "🔗 Access Information:"
              echo "  • Coder URL: ${{ needs.deploy-coder.outputs.coder_url || 'Check deployment logs' }}"
              echo "  • Admin User: ${{ needs.deploy-coder.outputs.admin_username || 'admin' }}"
            fi
          elif [[ "${{ steps.evaluate.outputs.overall_status }}" == "partial" ]]; then
            echo "⚠️  Partial Deployment"
            echo "  • Infrastructure deployed successfully"
            echo "  • Coder application deployment issues"
            echo "  • Cluster accessible via kubeconfig"
            echo ""
            echo "🔧 Troubleshooting Options:"
            echo "  • Use kubeconfig to investigate cluster state"
            echo "  • Retry Coder deployment independently"
            echo "  • Check storage classes and resource availability"
          else
            echo "❌ Deployment Failed"
            echo "  • Infrastructure deployment failed"
            echo "  • Check workflow logs for specific errors"
            echo "  • Verify Scaleway credentials and quotas"
          fi

      - name: Comment Deployment Summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const overallStatus = '${{ steps.evaluate.outputs.overall_status }}';
            const deploymentType = '${{ steps.evaluate.outputs.deployment_type }}';
            const statusEmoji = '${{ steps.evaluate.outputs.status_emoji }}';
            const statusMessage = '${{ steps.evaluate.outputs.status_message }}';
            const environment = '${{ needs.determine-strategy.outputs.deploy_env }}';
            const infraResult = '${{ needs.deploy-infrastructure.result }}';
            const coderResult = '${{ needs.deploy-coder.result || 'skipped' }}';

            let body = `## ${statusEmoji} Complete Environment Deployment Results

            **Status:** ${statusMessage}
            **Environment:** \`${environment}\`
            **Deployment Type:** ${deploymentType}

            ### 📊 Phase Results
            - **Phase 1 (Infrastructure):** ${infraResult}
            - **Phase 2 (Coder Application):** ${coderResult}

            ### 🔍 Deployment Details
            - **Template:** ${{ needs.determine-strategy.outputs.deploy_template || 'None specified' }}
            - **Domain:** ${{ needs.determine-strategy.outputs.deploy_domain || 'IP-based access' }}
            - **Monitoring:** ${{ needs.determine-strategy.outputs.enable_monitoring }}`;

            if (overallStatus === 'success') {
              if ('${{ needs.determine-strategy.outputs.skip_coder }}' === 'true') {
                body += `

            ### 🏗️ Infrastructure Ready
            - ✅ Kubernetes cluster deployed and accessible
            - ✅ Database and networking configured
            - ✅ Security policies applied
            - ✅ Kubeconfig available for Coder deployment

            **Next Steps:** Run 'Deploy Coder Application' workflow to complete setup.`;
              } else {
                body += `

            ### 🎉 Complete Environment Ready
            - ✅ Full infrastructure deployed
            - ✅ Coder application running
            - ✅ Ready for workspace creation

            **Access URL:** ${{ needs.deploy-coder.outputs.coder_url || 'Check deployment outputs' }}`;
              }
            } else if (overallStatus === 'partial') {
              body += `

            ### ⚠️ Partial Deployment
            - ✅ Infrastructure deployed successfully
            - ❌ Coder application deployment issues
            - 🔧 Cluster accessible via kubeconfig for troubleshooting

            **Recovery:** Retry Coder deployment independently or investigate using kubeconfig.`;
            } else {
              body += `

            ### ❌ Deployment Failed
            - ❌ Infrastructure deployment failed
            - 🔍 Check workflow logs for specific errors
            - 🔧 Verify Scaleway credentials and quotas`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [determine-strategy, deploy-infrastructure, deploy-coder, deployment-summary]
    if: always() && needs.determine-strategy.outputs.deploy_env != ''
    permissions:
      contents: read  # Read repository information
      issues: write   # Create issues on deployment failure

    steps:
      - name: Notify Slack (if configured)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [[ -n "$SLACK_WEBHOOK_URL" ]]; then
            infrastructure_result="${{ needs.deploy-infrastructure.result }}"
            coder_result="${{ needs.deploy-coder.result }}"
            environment="${{ needs.determine-strategy.outputs.deploy_env }}"
            skip_coder="${{ needs.determine-strategy.outputs.skip_coder }}"

            # Determine notification details
            if [[ "$infrastructure_result" == "success" ]]; then
              if [[ "$skip_coder" == "true" ]]; then
                color="good"
                emoji="🏗️"
                text="Infrastructure deployment succeeded (Coder skipped)"
              elif [[ "$coder_result" == "success" ]]; then
                color="good"
                emoji="🎉"
                text="Complete environment deployment succeeded"
              else
                color="warning"
                emoji="⚠️"
                text="Infrastructure succeeded, Coder failed"
              fi
            else
              color="danger"
              emoji="❌"
              text="Environment deployment failed"
            fi

            payload="{
              \"attachments\": [{
                \"color\": \"$color\",
                \"text\": \"$emoji $text\",
                \"fields\": [
                  {\"title\": \"Environment\", \"value\": \"$environment\", \"short\": true},
                  {\"title\": \"Infrastructure\", \"value\": \"$infrastructure_result\", \"short\": true},
                  {\"title\": \"Coder App\", \"value\": \"${coder_result:-skipped}\", \"short\": true},
                  {\"title\": \"Template\", \"value\": \"${{ needs.determine-strategy.outputs.deploy_template || 'None' }}\", \"short\": true},
                  {\"title\": \"Triggered by\", \"value\": \"${{ github.actor }}\", \"short\": true},
                  {\"title\": \"Repository\", \"value\": \"${{ github.repository }}\", \"short\": true}
                ]
              }]
            }"

            curl -X POST -H 'Content-type: application/json' \
              --data "$payload" "$SLACK_WEBHOOK_URL"
          else
            echo "Slack webhook not configured, skipping notification"
          fi

      - name: Create GitHub Issue on Complete Failure
        if: needs.deploy-infrastructure.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Complete Environment Deployment Failed: ${{ needs.determine-strategy.outputs.deploy_env }} environment`;
            const body = `## Complete Environment Deployment Failure Report

            **Environment:** ${{ needs.determine-strategy.outputs.deploy_env }}
            **Deployment Type:** Two-Phase (Infrastructure + Coder)
            **Failure Point:** Phase 1 (Infrastructure)
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            **Triggered by:** ${{ github.actor }}
            **Commit:** ${{ github.sha }}

            The complete environment deployment has failed during the infrastructure phase.

            ## Failure Analysis
            - **Phase 1 (Infrastructure):** ❌ Failed
            - **Phase 2 (Coder Application):** ⏭️ Not attempted (dependency failed)

            ## Components Affected
            - Kubernetes cluster deployment
            - Database provisioning
            - Networking and load balancer setup
            - Security policy configuration

            ## Next Steps
            1. Review infrastructure deployment logs
            2. Check Scaleway console for partially created resources
            3. Verify Scaleway credentials and quotas
            4. Check for resource conflicts or naming issues
            5. Clean up any orphaned resources
            6. Re-run complete deployment after fixing issues

            ## Recovery Options
            - **Full Retry:** Re-run this complete deployment workflow
            - **Manual Phases:** Run infrastructure and Coder deployments separately
            - **Cleanup First:** Use teardown workflow before retrying

            **Labels:** deployment-failure, infrastructure-failure, ${{ needs.determine-strategy.outputs.deploy_env }}`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['deployment-failure', 'infrastructure-failure', '${{ needs.determine-strategy.outputs.deploy_env }}']
            });

      - name: Create GitHub Issue on Partial Failure
        if: needs.deploy-infrastructure.result == 'success' && needs.deploy-coder.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Coder Application Deployment Failed: ${{ needs.determine-strategy.outputs.deploy_env }} environment`;
            const body = `## Partial Environment Deployment Failure Report

            **Environment:** ${{ needs.determine-strategy.outputs.deploy_env }}
            **Deployment Type:** Two-Phase (Infrastructure + Coder)
            **Failure Point:** Phase 2 (Coder Application)
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            **Triggered by:** ${{ github.actor }}
            **Commit:** ${{ github.sha }}

            The infrastructure deployed successfully, but Coder application deployment failed.

            ## Deployment Status
            - **Phase 1 (Infrastructure):** ✅ Successful
            - **Phase 2 (Coder Application):** ❌ Failed

            ## Available Resources
            - ✅ Kubernetes cluster is accessible
            - ✅ Database is running and accessible
            - ✅ Networking and load balancer configured
            - ✅ Security policies applied
            - ✅ Kubeconfig available for troubleshooting

            ## Troubleshooting Steps
            1. **Access Cluster:** Use kubeconfig from infrastructure deployment
            2. **Check Resources:**
               - \`kubectl get pods -n coder\`
               - \`kubectl get pvc -n coder\`
               - \`kubectl describe deployment coder -n coder\`
            3. **Review Logs:** Check Coder deployment workflow logs
            4. **Storage Issues:** Verify storage classes and PVC creation
            5. **Resource Limits:** Ensure cluster has sufficient resources

            ## Recovery Options
            - **Retry Coder Only:** Run 'Deploy Coder Application' workflow
            - **Manual Investigation:** Use kubeconfig to troubleshoot
            - **Complete Retry:** Re-run this complete deployment workflow
            - **Infrastructure Intact:** No need to redeploy infrastructure

            **Labels:** coder-failure, partial-deployment, ${{ needs.determine-strategy.outputs.deploy_env }}`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['coder-failure', 'partial-deployment', '${{ needs.determine-strategy.outputs.deploy_env }}']
            });