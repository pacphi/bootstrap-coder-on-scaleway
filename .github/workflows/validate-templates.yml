name: Validate Templates

# Set minimal required permissions for security
permissions:
  contents: read          # Access repository code
  pull-requests: write    # Comment validation results on PRs
  security-events: write  # Upload SARIF security scan results
  actions: write          # Upload validation report artifacts
  issues: write           # Create issues on critical failures

on:
  workflow_dispatch:
    inputs:
      template_filter:
        description: 'Template filter (e.g., "backend/*", "ai-enhanced/*", or specific template name)'
        required: false
        type: string
        default: '*'
      test_environment:
        description: 'Environment to use for validation tests'
        required: false
        type: choice
        options:
          - dev
          - staging
        default: dev
      comprehensive_test:
        description: 'Run comprehensive validation (includes deployment tests)'
        required: false
        type: boolean
        default: false

  pull_request:
    paths:
      - 'templates/**'
      - 'modules/**'

  push:
    branches: [main, develop]
    paths:
      - 'templates/**'
      - 'modules/**'

  schedule:
    # Run template validation daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  TF_IN_AUTOMATION: true

jobs:
  discover-templates:
    name: Discover Available Templates
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Read repository to discover templates
    outputs:
      templates: ${{ steps.discover.outputs.templates }}
      template_count: ${{ steps.discover.outputs.template_count }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Discover Templates
        id: discover
        run: |
          set -euo pipefail

          echo "::group::Template Discovery"
          echo "Starting template discovery..."

          # Check dependencies
          if ! command -v jq >/dev/null 2>&1; then
            echo "::error::jq is required but not installed"
            exit 1
          fi

          # Initialize variables
          filter="${{ github.event.inputs.template_filter || '*' }}"
          echo "Filter: $filter"
          templates_file=$(mktemp)

          # Find all main.tf files in templates directory
          echo "Searching for templates..."

          # Create empty JSON array to start
          echo '[]' > "$templates_file"

          while IFS= read -r -d '' template_file; do
            echo "::debug::Found template file: $template_file"

            # Extract relative path from templates directory
            relative_path="${template_file#./templates/}"
            echo "::debug::Relative path: $relative_path"

            # Extract category and template name using parameter expansion
            if [[ "$relative_path" =~ ^([^/]+)/([^/]+)/main\.tf$ ]]; then
              template_category="${BASH_REMATCH[1]}"
              template_name="${BASH_REMATCH[2]}"
              template_path="templates/$template_category/$template_name"

              echo "::debug::Parsed - Category: $template_category, Name: $template_name"

              # Validate extracted values
              if [[ -z "$template_category" ]] || [[ -z "$template_name" ]]; then
                echo "::warning::Skipping invalid template path: $template_file"
                continue
              fi

              # Apply filter
              skip_template=false
              if [[ "$filter" != "*" ]]; then
                if [[ "$filter" == *"/"* ]]; then
                  # Category filter (e.g., "backend/*")
                  category_filter="${filter%%/*}"
                  if [[ "$template_category" != "$category_filter" ]]; then
                    echo "::debug::Skipping $template_name - category doesn't match filter"
                    skip_template=true
                  fi
                else
                  # Specific template filter
                  if [[ "$template_name" != "$filter" ]]; then
                    echo "::debug::Skipping $template_name - name doesn't match filter"
                    skip_template=true
                  fi
                fi
              fi

              if [[ "$skip_template" == "false" ]]; then
                # Use jq to safely add template to JSON array
                tmp_file=$(mktemp)
                jq --arg name "$template_name" \
                   --arg category "$template_category" \
                   --arg path "$template_path" \
                   '. += [{"name": $name, "category": $category, "path": $path}]' \
                   "$templates_file" > "$tmp_file" && mv "$tmp_file" "$templates_file"

                if [[ $? -ne 0 ]]; then
                  echo "::error::Failed to add template $template_name to JSON"
                  rm -f "$templates_file" "$tmp_file" 2>/dev/null || true
                  exit 1
                fi

                echo "✓ Found template: $template_name (category: $template_category)"
              fi
            else
              echo "::warning::Unexpected template structure: $template_file"
            fi
          done < <(find ./templates -name "main.tf" -type f -print0 2>/dev/null | sort -z)

          # Read the final JSON
          if [[ -f "$templates_file" ]]; then
            templates_json=$(cat "$templates_file")
            rm -f "$templates_file"
          else
            templates_json="[]"
          fi

          # Validate JSON (should always be valid now, but double-check)
          if ! echo "$templates_json" | jq . >/dev/null 2>&1; then
            echo "::error::Generated invalid JSON despite using jq"
            echo "::debug::Invalid JSON: $templates_json"
            exit 1
          fi

          # Calculate template count from final JSON
          template_count=$(echo "$templates_json" | jq '. | length' 2>/dev/null || echo "0")

          # Check results
          if [[ $template_count -eq 0 ]]; then
            echo "::warning::No templates found matching filter: $filter"
            templates_json="[]"
          fi

          # Pretty print discovered templates
          echo ""
          echo "Templates JSON:"
          echo "$templates_json" | jq .

          # Set outputs (compact JSON for GitHub Actions)
          templates_json_compact=$(echo "$templates_json" | jq -c . 2>/dev/null || echo "[]")
          echo "templates=$templates_json_compact" >> $GITHUB_OUTPUT
          echo "template_count=$template_count" >> $GITHUB_OUTPUT

          # Summary
          echo ""
          echo "================================================================"
          echo "✅ Template discovery completed successfully"
          echo "📊 Total templates found: $template_count"
          echo "🔍 Filter applied: $filter"
          echo "================================================================"
          echo "::endgroup::"

  validate-syntax:
    name: Validate Template Syntax
    runs-on: ubuntu-latest
    needs: discover-templates
    if: needs.discover-templates.outputs.template_count > 0
    permissions:
      contents: read  # Read repository code for validation
    strategy:
      matrix:
        template: ${{ fromJson(needs.discover-templates.outputs.templates) }}
      fail-fast: false

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.12.0"

      - name: Validate Template
        run: |
          echo "Validating template: ${{ matrix.template.name }} (category: ${{ matrix.template.category }})"
          cd "${{ matrix.template.path }}"

          # Initialize and validate
          terraform init -backend=false
          terraform validate

          # Check for required files
          required_files=("main.tf")
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "::error::Missing required file: $file"
              exit 1
            fi
          done

          # Format check
          terraform fmt -check -recursive

          echo "✅ Template ${{ matrix.template.name }} validation passed"

  validate-documentation:
    name: Validate Template Documentation
    runs-on: ubuntu-latest
    needs: discover-templates
    if: needs.discover-templates.outputs.template_count > 0
    permissions:
      contents: read  # Read repository code and documentation
    strategy:
      matrix:
        template: ${{ fromJson(needs.discover-templates.outputs.templates) }}
      fail-fast: false

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check Documentation
        run: |
          template_path="${{ matrix.template.path }}"
          template_name="${{ matrix.template.name }}"

          echo "Checking documentation for: $template_name"

          # Check for README file
          readme_found=false
          for readme in "README.md" "readme.md" "Readme.md"; do
            if [[ -f "$template_path/$readme" ]]; then
              readme_found=true
              echo "✅ Found README: $readme"
              break
            fi
          done

          if [[ "$readme_found" == "false" ]]; then
            echo "::warning::No README found for template: $template_name"
          fi

          # Check if template is documented in main docs
          if grep -q "$template_name" docs/USAGE.md; then
            echo "✅ Template documented in USAGE.md"
          else
            echo "::warning::Template $template_name not found in docs/USAGE.md"
          fi

          # Check main.tf for descriptions
          if [[ -f "$template_path/main.tf" ]]; then
            if grep -q "description" "$template_path/main.tf"; then
              echo "✅ Template contains descriptions"
            else
              echo "::warning::Template main.tf lacks descriptions"
            fi
          fi

  security-scan:
    name: Security Scan Templates
    runs-on: ubuntu-latest
    needs: discover-templates
    if: needs.discover-templates.outputs.template_count > 0
    permissions:
      contents: read          # Read repository code for scanning
      security-events: write  # Upload SARIF security scan results

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Checkov Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: templates/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true

      - name: Upload Security Scan Results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  setup-backend:
    name: Setup Terraform Backend
    needs: [discover-templates, validate-syntax]
    if: |
      needs.discover-templates.outputs.template_count > 0 &&
      github.event.inputs.comprehensive_test == 'true' &&
      success()
    uses: ./.github/workflows/setup-backend.yml
    with:
      environment: ${{ github.event.inputs.test_environment || 'dev' }}
      region: ${{ vars.SCALEWAY_REGION || 'fr-par' }}
      force_recreate: false
    secrets: inherit

  test-deployment:
    name: Test Template Deployment
    runs-on: ubuntu-latest
    needs: [discover-templates, validate-syntax, setup-backend]
    if: |
      needs.discover-templates.outputs.template_count > 0 &&
      github.event.inputs.comprehensive_test == 'true' &&
      needs.setup-backend.outputs.backend_configured == 'true' &&
      success()
    permissions:
      contents: read   # Read repository code
      id-token: write  # For OIDC authentication with Scaleway
    strategy:
      matrix:
        template: ${{ fromJson(needs.discover-templates.outputs.templates) }}
      fail-fast: false
      max-parallel: 2  # Limit concurrent deployments to avoid resource conflicts

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.12.0"
          terraform_wrapper: false

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.32.0'

      - name: Configure Scaleway Credentials
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_DEFAULT_PROJECT_ID }}
          SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
        run: |
          echo "SCW_ACCESS_KEY=${SCW_ACCESS_KEY}" >> $GITHUB_ENV
          echo "SCW_SECRET_KEY=${SCW_SECRET_KEY}" >> $GITHUB_ENV
          echo "SCW_DEFAULT_PROJECT_ID=${SCW_DEFAULT_PROJECT_ID}" >> $GITHUB_ENV
          echo "SCW_DEFAULT_ORGANIZATION_ID=${SCW_DEFAULT_ORGANIZATION_ID}" >> $GITHUB_ENV

      - name: Download Backend Configuration
        uses: actions/download-artifact@v4
        with:
          name: backend-config-${{ github.event.inputs.test_environment || 'dev' }}-${{ github.run_id }}
          path: ./

      - name: Initialize Test Environment Backend
        run: |
          cd environments/${{ github.event.inputs.test_environment || 'dev' }}

          echo "🔄 Initializing with remote backend..."
          echo "Backend bucket: ${{ needs.setup-backend.outputs.bucket_name }}"
          terraform init

      - name: Deploy Test Environment
        id: deploy-env
        run: |
          cd environments/${{ github.event.inputs.test_environment || 'dev' }}

          # Plan and apply minimal environment for testing
          terraform plan -out=test.tfplan
          terraform apply -auto-approve test.tfplan

          echo "environment_deployed=true" >> $GITHUB_OUTPUT

      - name: Validate Template Deployment
        if: steps.deploy-env.outputs.environment_deployed == 'true'
        run: |
          chmod +x scripts/validate.sh

          # Validate the deployed environment
          ./scripts/validate.sh \
            --env=${{ github.event.inputs.test_environment || 'dev' }} \
            --components=coder \
            --detailed

      - name: Cleanup Test Environment
        if: always() && steps.deploy-env.outputs.environment_deployed == 'true'
        run: |
          cd environments/${{ github.event.inputs.test_environment || 'dev' }}

          # Clean up the test environment
          echo "🔥 Cleaning up test environment..."
          terraform plan -destroy -out=cleanup.tfplan
          terraform apply -auto-approve cleanup.tfplan

  generate-report:
    name: Generate Validation Report
    runs-on: ubuntu-latest
    needs: [discover-templates, validate-syntax, validate-documentation, security-scan]
    if: always()
    permissions:
      contents: read        # Read repository information
      actions: write        # Upload validation report artifacts
      pull-requests: write  # Comment validation results on PRs

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Generate Template Validation Report
        run: |
          cat > template-validation-report.md << 'EOF'
          # Template Validation Report

          **Date:** $(date -Iseconds)
          **Triggered by:** ${{ github.event_name }} (${{ github.actor }})
          **Repository:** ${{ github.repository }}
          **Commit:** ${{ github.sha }}

          ## Summary
          - **Templates Discovered:** ${{ needs.discover-templates.outputs.template_count }}
          - **Filter Applied:** ${{ github.event.inputs.template_filter || 'None (*)'  }}
          - **Comprehensive Testing:** ${{ github.event.inputs.comprehensive_test || 'false' }}

          ## Validation Results

          | Stage | Status | Details |
          |-------|--------|---------|
          | Template Discovery | ${{ needs.discover-templates.result == 'success' && '✅ Passed' || '❌ Failed' }} | Found ${{ needs.discover-templates.outputs.template_count }} templates |
          | Syntax Validation | ${{ needs.validate-syntax.result == 'success' && '✅ Passed' || (needs.validate-syntax.result == 'failure' && '❌ Failed' || '⏭️ Skipped') }} | Terraform syntax and format validation |
          | Documentation Check | ${{ needs.validate-documentation.result == 'success' && '✅ Passed' || (needs.validate-documentation.result == 'failure' && '❌ Failed' || '⏭️ Skipped') }} | README and documentation validation |
          | Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || (needs.security-scan.result == 'failure' && '❌ Failed' || '⏭️ Skipped') }} | Checkov security scanning |
          | Deployment Test | ${{ needs.test-deployment.result == 'success' && '✅ Passed' || (needs.test-deployment.result == 'failure' && '❌ Failed' || '⏭️ Skipped') }} | Live deployment testing |

          ## Discovered Templates

          $( echo '${{ needs.discover-templates.outputs.templates }}' | jq -r '.[] | "- **\(.name)** (\(.category)): `\(.path)`"' 2>/dev/null || echo "Template list unavailable" )

          ## Recommendations

          $( if [[ "${{ needs.validate-syntax.result }}" == "failure" ]]; then
            echo "- 🔧 Fix Terraform syntax errors in failing templates"
          fi

          if [[ "${{ needs.validate-documentation.result }}" != "success" ]]; then
            echo "- 📝 Improve template documentation (add README files)"
          fi

          if [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "- 🔒 Address security findings from Checkov scan"
          fi

          if [[ "${{ needs.test-deployment.result }}" == "failure" ]]; then
            echo "- 🚨 Fix deployment issues in failing templates"
          fi )

          ## Next Steps

          - Review validation failures in workflow logs
          - Update templates to address any issues
          - Consider running comprehensive tests before major releases

          **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          EOF

      - name: Upload Validation Report
        uses: actions/upload-artifact@v4
        with:
          name: template-validation-report-$(date +%Y%m%d)
          path: template-validation-report.md
          retention-days: 30

      - name: Comment Validation Results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('template-validation-report.md', 'utf8');

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [discover-templates, validate-syntax, validate-documentation, security-scan, test-deployment]
    if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    permissions:
      contents: read  # Read repository information
      issues: write   # Create issues on critical failures

    steps:
      - name: Determine Overall Status
        id: status
        run: |
          # Check if any critical jobs failed
          syntax_status="${{ needs.validate-syntax.result }}"
          deploy_status="${{ needs.test-deployment.result }}"

          if [[ "$syntax_status" == "failure" || "$deploy_status" == "failure" ]]; then
            echo "overall_status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
          elif [[ "$syntax_status" == "success" && ("$deploy_status" == "success" || "$deploy_status" == "skipped") ]]; then
            echo "overall_status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
          else
            echo "overall_status=partial" >> $GITHUB_OUTPUT
            echo "emoji=⚠️" >> $GITHUB_OUTPUT
          fi

      - name: Notify Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [[ -n "$SLACK_WEBHOOK_URL" ]]; then
            status="${{ steps.status.outputs.overall_status }}"
            emoji="${{ steps.status.outputs.emoji }}"

            case "$status" in
              success) color="good"; text="Template validation completed successfully" ;;
              failure) color="danger"; text="Template validation failed" ;;
              *) color="warning"; text="Template validation completed with warnings" ;;
            esac

            payload="{
              \"attachments\": [{
                \"color\": \"$color\",
                \"text\": \"$emoji $text\",
                \"fields\": [
                  {\"title\": \"Templates Validated\", \"value\": \"${{ needs.discover-templates.outputs.template_count }}\", \"short\": true},
                  {\"title\": \"Filter Applied\", \"value\": \"${{ github.event.inputs.template_filter || '*' }}\", \"short\": true},
                  {\"title\": \"Comprehensive Test\", \"value\": \"${{ github.event.inputs.comprehensive_test || 'false' }}\", \"short\": true},
                  {\"title\": \"Repository\", \"value\": \"${{ github.repository }}\", \"short\": true}
                ]
              }]
            }"

            curl -X POST -H 'Content-type: application/json' \
              --data "$payload" "$SLACK_WEBHOOK_URL"
          else
            echo "Slack webhook not configured, skipping notification"
          fi

      - name: Create Issue on Critical Failure
        if: steps.status.outputs.overall_status == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Template Validation Failure: Critical Issues Detected`;
            const body = `## Template Validation Failure

            Critical issues have been detected in template validation.

            **Validation Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            **Templates Affected:** ${{ needs.discover-templates.outputs.template_count }}
            **Filter:** ${{ github.event.inputs.template_filter || '*' }}

            ## Failed Stages
            ${ '${{ needs.validate-syntax.result }}' === 'failure' ? '- ❌ Syntax Validation' : '' }
            ${ '${{ needs.test-deployment.result }}' === 'failure' ? '- ❌ Deployment Testing' : '' }

            ## Immediate Actions Required
            1. Review workflow logs for detailed error messages
            2. Fix syntax errors and deployment issues
            3. Re-run validation after fixes
            4. Consider disabling problematic templates temporarily

            **Priority:** High - Template reliability issue`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['template-validation', 'bug', 'high-priority']
            });