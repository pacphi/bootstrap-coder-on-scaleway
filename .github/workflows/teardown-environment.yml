name: Teardown Complete Coder Environment

# Set minimal required permissions for security
permissions:
  contents: read   # Access repository code
  issues: write    # Create cleanup failure issues
  actions: read    # Download artifacts (kubeconfig)
  id-token: write  # For OIDC authentication if needed

on:
  workflow_dispatch:
    inputs:
      bucket_name:
        description: 'Name of the bucket in object store that holds Terraform state'
        required: false
        type: string
      environment:
        description: 'Environment to teardown'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      region:
        description: 'Scaleway region'
        required: true
        type: choice
        options:
          - fr-par
          - nl-ams
          - pl-waw
        default: 'fr-par'
      availability_zone:
        description: 'Scaleway availibility zone (which should be within region)'
        required: true
        type: choice
        options:
          - fr-par-1
          - fr-par-2
          - fr-par-3
          - nl-ams-1
          - nl-ams-2
          - nl-ams-3
          - pl-waw-1
          - pl-waw-2
          - pl-waw-3
        default: 'fr-par-1'
      confirmation:
        description: 'Type CONFIRM to proceed with teardown'
        required: true
        type: string
      teardown_mode:
        description: 'Teardown mode'
        required: false
        type: choice
        options:
          - complete  # Both Coder and Infrastructure
          - coder_only  # Only Coder application
          - infrastructure_only  # Only infrastructure
        default: 'complete'
      backup_before_destroy:
        description: 'Create backup before teardown'
        required: false
        type: boolean
        default: true
      preserve_data:
        description: 'Preserve data volumes (experimental)'
        required: false
        type: boolean
        default: false
      emergency_mode:
        description: 'Emergency teardown (bypasses safety checks)'
        required: false
        type: boolean
        default: false
      force_cleanup:
        description: 'Force cleanup even if terraform destroy fails'
        required: false
        type: boolean
        default: false

env:
  TF_IN_AUTOMATION: true
  TF_VAR_scaleway_region: ${{ github.event.inputs.region }}
  TF_VAR_scaleway_zone: ${{ github.event.inputs.availability_zone }}
  # Consolidated Scaleway credentials and mappings
  SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
  SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
  SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_DEFAULT_PROJECT_ID }}
  SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
  # AWS variables for S3 backend compatibility
  AWS_ACCESS_KEY_ID: ${{ secrets.SCW_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.SCW_SECRET_KEY }}

jobs:
  validate-request:
    name: Validate Teardown Request
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Read repository code for validation
    outputs:
      confirmed: ${{ steps.validation.outputs.confirmed }}
      teardown_mode: ${{ steps.validation.outputs.teardown_mode }}
      emergency_mode: ${{ steps.validation.outputs.emergency_mode }}

    steps:
      - name: Validate Confirmation
        id: validation
        run: |
          if [[ "${{ github.event.inputs.confirmation }}" == "CONFIRM" ]]; then
            echo "confirmed=true" >> $GITHUB_OUTPUT
            echo "teardown_mode=${{ github.event.inputs.teardown_mode }}" >> $GITHUB_OUTPUT
            echo "emergency_mode=${{ github.event.inputs.emergency_mode }}" >> $GITHUB_OUTPUT
            echo "‚úÖ Teardown request confirmed"
          else
            echo "confirmed=false" >> $GITHUB_OUTPUT
            echo "‚ùå Invalid confirmation. Please type 'CONFIRM' to proceed."
            exit 1
          fi

      - name: Extra Production Validation
        if: github.event.inputs.environment == 'prod'
        run: |
          echo "üî¥ PRODUCTION ENVIRONMENT TEARDOWN REQUESTED"
          echo "This will PERMANENTLY DELETE the production environment!"
          echo "Mode: ${{ github.event.inputs.teardown_mode }}"
          echo "Emergency: ${{ github.event.inputs.emergency_mode }}"
          echo "Proceeding with additional safety checks..."

      - name: Display Teardown Plan
        run: |
          echo "üóëÔ∏è Two-Phase Teardown Plan"
          echo "========================="
          echo ""
          echo "üìã Teardown Configuration:"
          echo "  Environment: ${{ github.event.inputs.environment }}"
          echo "  Mode: ${{ github.event.inputs.teardown_mode }}"
          echo "  Backup Before: ${{ github.event.inputs.backup_before_destroy }}"
          echo "  Preserve Data: ${{ github.event.inputs.preserve_data }}"
          echo "  Emergency Mode: ${{ github.event.inputs.emergency_mode }}"
          echo "  Force Cleanup: ${{ github.event.inputs.force_cleanup }}"
          echo ""
          echo "üîÑ Teardown Phases:"
          if [[ "${{ github.event.inputs.teardown_mode }}" == "complete" ]]; then
            echo "  Phase 1: Coder Application Teardown"
            echo "  Phase 2: Infrastructure Teardown"
          elif [[ "${{ github.event.inputs.teardown_mode }}" == "coder_only" ]]; then
            echo "  Phase 1: Coder Application Teardown"
            echo "  Phase 2: ‚è≠Ô∏è SKIPPED (Infrastructure preserved)"
          else
            echo "  Phase 1: ‚è≠Ô∏è SKIPPED (Coder preservation attempted)"
            echo "  Phase 2: Infrastructure Teardown"
          fi
          echo ""
          echo "‚ö†Ô∏è WARNING: This operation cannot be undone!"

  discover-backend-state:
    name: Discover Backend State
    runs-on: ubuntu-latest
    needs: validate-request
    if: needs.validate-request.outputs.confirmed == 'true'
    outputs:
      coder_state_exists: ${{ steps.discover.outputs.coder_state_exists }}
      infra_state_exists: ${{ steps.discover.outputs.infra_state_exists }}
      backend_bucket: ${{ steps.discover.outputs.backend_bucket }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Scaleway CLI
        uses: scaleway/action-scw@v0
        with:
          save-config: true
          export-config: true
          access-key: ${{ env.SCW_ACCESS_KEY }}
          secret-key: ${{ env.SCW_SECRET_KEY }}
          default-project-id: ${{ env.SCW_DEFAULT_PROJECT_ID }}
          default-organization-id: ${{ env.SCW_DEFAULT_ORGANIZATION_ID }}

      - name: Install s3cmd
        run: sudo apt-get update && sudo apt-get install -y s3cmd

      - name: Generate s3cmd configuration using Scaleway CLI
        run: |
          scw object config get type=s3cmd > ~/.s3cfg
          echo "‚úÖ s3cmd configured for Scaleway Object Storage"

      - name: Discover State Files
        id: discover
        run: |
          environment="${{ github.event.inputs.environment }}"
          region="${{ github.event.inputs.region }}"

          # Determine bucket name
          if [[ -n "${{ github.event.inputs.bucket_name }}" ]]; then
            bucket_name="${{ github.event.inputs.bucket_name }}"
          else
            bucket_name="terraform-state-coder-$environment"
          fi

          echo "backend_bucket=$bucket_name" >> $GITHUB_OUTPUT
          echo "üîç Checking for state files in bucket: $bucket_name"

          # Check for Coder state file
          coder_state_exists="false"
          if s3cmd ls "s3://$bucket_name/$environment/coder/terraform.tfstate" >/dev/null 2>&1; then
            coder_state_exists="true"
            echo "‚úÖ Coder state file found"
          else
            echo "‚ö†Ô∏è Coder state file not found"
          fi
          echo "coder_state_exists=$coder_state_exists" >> $GITHUB_OUTPUT

          # Check for Infrastructure state file
          infra_state_exists="false"
          if s3cmd ls "s3://$bucket_name/$environment/infra/terraform.tfstate" >/dev/null 2>&1; then
            infra_state_exists="true"
            echo "‚úÖ Infrastructure state file found"
          else
            echo "‚ö†Ô∏è Infrastructure state file not found"
          fi
          echo "infra_state_exists=$infra_state_exists" >> $GITHUB_OUTPUT

          echo ""
          echo "üìä State Discovery Summary:"
          echo "  Coder Application State: $coder_state_exists"
          echo "  Infrastructure State: $infra_state_exists"

  pre-teardown-backup:
    name: Create Pre-Teardown Backup
    runs-on: ubuntu-latest
    needs: [validate-request, discover-backend-state]
    if: needs.validate-request.outputs.confirmed == 'true' && github.event.inputs.backup_before_destroy == 'true' && (needs.discover-backend-state.outputs.coder_state_exists == 'true' || needs.discover-backend-state.outputs.infra_state_exists == 'true')
    permissions:
      contents: read  # Read repository code
      actions: write  # Upload backup artifacts

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.32.0'

      - name: Download Kubeconfig (if available)
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig-${{ github.event.inputs.environment }}-infra
          path: ./

      - name: Setup Kubeconfig
        continue-on-error: true
        run: |
          kubeconfig_file="kubeconfig-${{ github.event.inputs.environment }}"
          if [[ -f "$kubeconfig_file" ]]; then
            mkdir -p ~/.kube
            cp "$kubeconfig_file" ~/.kube/config-coder-${{ github.event.inputs.environment }}
            chmod 600 ~/.kube/config-coder-${{ github.event.inputs.environment }}
            echo "‚úÖ Kubeconfig configured for backup"
          else
            echo "‚ö†Ô∏è Kubeconfig not available - backup will be limited"
          fi

      - name: Create Pre-Teardown Backup
        id: backup
        run: |
          if [[ -f "scripts/lifecycle/backup.sh" ]]; then
            chmod +x scripts/lifecycle/backup.sh

            backup_name="pre-teardown-$(date +%Y%m%d-%H%M%S)-${{ github.event.inputs.environment }}"

            ./scripts/lifecycle/backup.sh \
              --env=${{ github.event.inputs.environment }} \
              --backup-name="$backup_name" \
              --pre-destroy \
              --auto || true

            echo "backup_name=$backup_name" >> $GITHUB_OUTPUT
            echo "‚úÖ Backup attempt completed"
          else
            echo "‚ö†Ô∏è Backup script not found - skipping backup"
            echo "backup_name=backup-unavailable" >> $GITHUB_OUTPUT
          fi

      - name: Upload Backup Artifact
        if: steps.backup.outputs.backup_name != 'backup-unavailable'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.backup.outputs.backup_name }}
          path: backups/${{ steps.backup.outputs.backup_name }}.tar.gz
          retention-days: 30
        continue-on-error: true

  analyze-impact:
    name: Analyze Teardown Impact
    runs-on: ubuntu-latest
    needs: [validate-request, discover-backend-state]
    if: needs.validate-request.outputs.confirmed == 'true'
    permissions:
      contents: read  # Read repository code
      actions: read   # Download kubeconfig artifacts
    outputs:
      cost_savings: ${{ steps.impact.outputs.cost_savings }}
      resource_count: ${{ steps.impact.outputs.resource_count }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Analyze Impact
        id: impact
        run: |
          environment="${{ github.event.inputs.environment }}"
          teardown_mode="${{ github.event.inputs.teardown_mode }}"

          echo "üîç Analyzing teardown impact for $environment"

          # Calculate estimated cost savings based on environment
          case "$environment" in
            dev)
              if [[ "$teardown_mode" == "complete" ]]; then
                monthly_savings="53.70"
                resource_count="~15"
              elif [[ "$teardown_mode" == "coder_only" ]]; then
                monthly_savings="8.50"
                resource_count="~5"
              else
                monthly_savings="45.20"
                resource_count="~10"
              fi
              ;;
            staging)
              if [[ "$teardown_mode" == "complete" ]]; then
                monthly_savings="97.85"
                resource_count="~25"
              elif [[ "$teardown_mode" == "coder_only" ]]; then
                monthly_savings="12.35"
                resource_count="~7"
              else
                monthly_savings="85.50"
                resource_count="~18"
              fi
              ;;
            prod)
              if [[ "$teardown_mode" == "complete" ]]; then
                monthly_savings="374.50"
                resource_count="~45"
              elif [[ "$teardown_mode" == "coder_only" ]]; then
                monthly_savings="54.20"
                resource_count="~15"
              else
                monthly_savings="320.30"
                resource_count="~30"
              fi
              ;;
          esac

          echo "cost_savings=$monthly_savings" >> $GITHUB_OUTPUT
          echo "resource_count=$resource_count" >> $GITHUB_OUTPUT

          echo "üí∞ Estimated monthly cost savings: ‚Ç¨$monthly_savings"
          echo "üìä Estimated resources to be deleted: $resource_count"

  teardown-coder:
    name: Teardown Coder Application (Phase 1)
    runs-on: ubuntu-latest
    needs: [validate-request, discover-backend-state, pre-teardown-backup, analyze-impact]
    if: needs.validate-request.outputs.confirmed == 'true' && needs.discover-backend-state.outputs.coder_state_exists == 'true' && (needs.validate-request.outputs.teardown_mode == 'complete' || needs.validate-request.outputs.teardown_mode == 'coder_only')
    outputs:
      coder_teardown_result: ${{ steps.teardown.outputs.result }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.12.0"
          terraform_wrapper: false

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.32.0'

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.12.0'

      - name: Setup Backend Configuration for Coder
        run: |
          environment="${{ github.event.inputs.environment }}"
          bucket_name="${{ needs.discover-backend-state.outputs.backend_bucket }}"
          region="${{ github.event.inputs.region }}"
          coder_dir="environments/$environment/coder"

          if [[ ! -d "$coder_dir" ]]; then
            echo "‚ùå Coder directory not found: $coder_dir"
            echo "This may indicate an older deployment structure or missing Coder deployment"
            exit 1
          fi

          # Create backend.tf for Coder teardown
          cat > "$coder_dir/backend.tf" << EOF
          terraform {
            backend "s3" {
              bucket = "$bucket_name"
              key    = "$environment/coder/terraform.tfstate"
              region = "$region"
              endpoints = {
                s3 = "https://s3.$region.scw.cloud"
              }
              skip_credentials_validation = true
              skip_metadata_api_check     = true
              skip_region_validation      = true
            }
          }
          EOF

          echo "‚úÖ Backend configuration created for Coder teardown"

      - name: Initialize Terraform for Coder
        run: |
          cd environments/${{ github.event.inputs.environment }}/coder

          echo "üîÑ Initializing Terraform for Coder teardown..."
          terraform init

      - name: Teardown Coder Application
        id: teardown
        run: |
          cd environments/${{ github.event.inputs.environment }}/coder

          echo "üóëÔ∏è Starting Coder application teardown..."

          # Attempt terraform destroy
          set +e
          if [[ "${{ github.event.inputs.emergency_mode }}" == "true" ]]; then
            echo "‚ö†Ô∏è Emergency mode: Forcing destroy with minimal checks"
            terraform destroy -auto-approve -parallelism=10
          else
            terraform destroy -auto-approve
          fi
          destroy_exit_code=$?
          set -e

          if [[ $destroy_exit_code -eq 0 ]]; then
            echo "result=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Coder application teardown completed successfully"
          else
            if [[ "${{ github.event.inputs.force_cleanup }}" == "true" ]]; then
              echo "result=partial" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è Terraform destroy failed, but continuing due to force_cleanup flag"
            else
              echo "result=failure" >> $GITHUB_OUTPUT
              echo "‚ùå Coder application teardown failed"
              exit 1
            fi
          fi

  teardown-infrastructure:
    name: Teardown Infrastructure (Phase 2)
    runs-on: ubuntu-latest
    needs: [validate-request, discover-backend-state, pre-teardown-backup, analyze-impact, teardown-coder]
    if: always() && needs.validate-request.outputs.confirmed == 'true' && needs.discover-backend-state.outputs.infra_state_exists == 'true' && (needs.validate-request.outputs.teardown_mode == 'complete' || needs.validate-request.outputs.teardown_mode == 'infrastructure_only') && (needs.teardown-coder.result == 'success' || needs.teardown-coder.result == 'skipped' || needs.validate-request.outputs.teardown_mode == 'infrastructure_only' || github.event.inputs.force_cleanup == 'true')
    outputs:
      infra_teardown_result: ${{ steps.teardown.outputs.result }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.12.0"
          terraform_wrapper: false

      - name: Setup Backend Configuration for Infrastructure
        run: |
          environment="${{ github.event.inputs.environment }}"
          bucket_name="${{ needs.discover-backend-state.outputs.backend_bucket }}"
          region="${{ github.event.inputs.region }}"
          infra_dir="environments/$environment/infra"

          if [[ ! -d "$infra_dir" ]]; then
            echo "‚ùå Infrastructure directory not found: $infra_dir"
            echo "This may indicate an older deployment structure"
            exit 1
          fi

          # Create backend.tf for Infrastructure teardown
          cat > "$infra_dir/backend.tf" << EOF
          terraform {
            backend "s3" {
              bucket = "$bucket_name"
              key    = "$environment/infra/terraform.tfstate"
              region = "$region"
              endpoints = {
                s3 = "https://s3.$region.scw.cloud"
              }
              skip_credentials_validation = true
              skip_metadata_api_check     = true
              skip_region_validation      = true
            }
          }
          EOF

          echo "‚úÖ Backend configuration created for Infrastructure teardown"

      - name: Initialize Terraform for Infrastructure
        run: |
          cd environments/${{ github.event.inputs.environment }}/infra

          echo "üîÑ Initializing Terraform for Infrastructure teardown..."
          terraform init

      - name: Teardown Infrastructure
        id: teardown
        run: |
          cd environments/${{ github.event.inputs.environment }}/infra

          echo "üóëÔ∏è Starting Infrastructure teardown..."

          # Attempt terraform destroy
          set +e
          if [[ "${{ github.event.inputs.emergency_mode }}" == "true" ]]; then
            echo "‚ö†Ô∏è Emergency mode: Forcing destroy with minimal checks"
            terraform destroy -auto-approve -parallelism=10
          else
            terraform destroy -auto-approve
          fi
          destroy_exit_code=$?
          set -e

          if [[ $destroy_exit_code -eq 0 ]]; then
            echo "result=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Infrastructure teardown completed successfully"
          else
            if [[ "${{ github.event.inputs.force_cleanup }}" == "true" ]]; then
              echo "result=partial" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è Terraform destroy failed, but continuing due to force_cleanup flag"
            else
              echo "result=failure" >> $GITHUB_OUTPUT
              echo "‚ùå Infrastructure teardown failed"
              exit 1
            fi
          fi

  cleanup-backend:
    name: Cleanup Backend and Artifacts
    runs-on: ubuntu-latest
    needs: [validate-request, discover-backend-state, teardown-coder, teardown-infrastructure]
    if: always() && needs.validate-request.outputs.confirmed == 'true' && (needs.teardown-coder.result == 'success' || needs.teardown-infrastructure.result == 'success' || github.event.inputs.force_cleanup == 'true')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Scaleway CLI
        uses: scaleway/action-scw@v0
        with:
          save-config: true
          export-config: true
          access-key: ${{ env.SCW_ACCESS_KEY }}
          secret-key: ${{ env.SCW_SECRET_KEY }}
          default-project-id: ${{ env.SCW_DEFAULT_PROJECT_ID }}
          default-organization-id: ${{ env.SCW_DEFAULT_ORGANIZATION_ID }}

      - name: Install s3cmd
        run: sudo apt-get update && sudo apt-get install -y s3cmd

      - name: Generate s3cmd configuration using Scaleway CLI
        run: |
          scw object config get type=s3cmd > ~/.s3cfg
          echo "‚úÖ s3cmd configured for Scaleway Object Storage"

      - name: Cleanup State Files
        run: |
          environment="${{ github.event.inputs.environment }}"
          bucket_name="${{ needs.discover-backend-state.outputs.backend_bucket }}"
          region="${{ github.event.inputs.region }}"

          echo "üßπ Cleaning up state files..."

          # Clean up Coder state file if teardown was successful
          if [[ "${{ needs.teardown-coder.result }}" == "success" ]]; then
            echo "üóëÔ∏è Removing Coder state file..."
            s3cmd rm "s3://$bucket_name/$environment/coder/terraform.tfstate" || true
            echo "‚úÖ Coder state file cleaned up"
          fi

          # Clean up Infrastructure state file if teardown was successful
          if [[ "${{ needs.teardown-infrastructure.result }}" == "success" ]]; then
            echo "üóëÔ∏è Removing Infrastructure state file..."
            s3cmd rm "s3://$bucket_name/$environment/infra/terraform.tfstate" || true
            echo "‚úÖ Infrastructure state file cleaned up"
          fi

          # If both components are gone, clean up the entire bucket
          if [[ "${{ needs.teardown-coder.result }}" == "success" && "${{ needs.teardown-infrastructure.result }}" == "success" ]]; then
            echo "üóëÔ∏è Removing entire state bucket..."
            s3cmd rb "s3://$bucket_name" --recursive || true
            echo "‚úÖ State bucket removed"
          fi

  teardown-summary:
    name: Teardown Summary
    runs-on: ubuntu-latest
    needs: [validate-request, discover-backend-state, analyze-impact, teardown-coder, teardown-infrastructure, cleanup-backend]
    if: always() && needs.validate-request.outputs.confirmed == 'true'
    permissions:
      contents: read        # Read repository information
      issues: write         # Create issues on teardown issues

    steps:
      - name: Evaluate Teardown Results
        id: evaluate
        run: |
          teardown_mode="${{ needs.validate-request.outputs.teardown_mode }}"
          coder_result="${{ needs.teardown-coder.result || 'skipped' }}"
          infra_result="${{ needs.teardown-infrastructure.result || 'skipped' }}"

          echo "üîç Evaluating teardown results..."
          echo "Teardown Mode: $teardown_mode"
          echo "Coder Result: $coder_result"
          echo "Infrastructure Result: $infra_result"

          # Determine overall status
          if [[ "$teardown_mode" == "complete" ]]; then
            if [[ "$coder_result" == "success" && "$infra_result" == "success" ]]; then
              overall_status="success"
              status_message="Complete environment teardown successful"
              status_emoji="‚úÖ"
            elif [[ "$coder_result" != "failure" && "$infra_result" != "failure" ]]; then
              overall_status="partial"
              status_message="Partial teardown completed with some issues"
              status_emoji="‚ö†Ô∏è"
            else
              overall_status="failure"
              status_message="Teardown failed"
              status_emoji="‚ùå"
            fi
          elif [[ "$teardown_mode" == "coder_only" ]]; then
            if [[ "$coder_result" == "success" ]]; then
              overall_status="success"
              status_message="Coder application teardown successful"
              status_emoji="‚úÖ"
            else
              overall_status="failure"
              status_message="Coder application teardown failed"
              status_emoji="‚ùå"
            fi
          else  # infrastructure_only
            if [[ "$infra_result" == "success" ]]; then
              overall_status="success"
              status_message="Infrastructure teardown successful"
              status_emoji="‚úÖ"
            else
              overall_status="failure"
              status_message="Infrastructure teardown failed"
              status_emoji="‚ùå"
            fi
          fi

          echo "overall_status=$overall_status" >> $GITHUB_OUTPUT
          echo "status_message=$status_message" >> $GITHUB_OUTPUT
          echo "status_emoji=$status_emoji" >> $GITHUB_OUTPUT

      - name: Display Teardown Summary
        run: |
          echo "${{ steps.evaluate.outputs.status_emoji }} Teardown Summary"
          echo "========================="
          echo ""
          echo "üìã Final Status: ${{ steps.evaluate.outputs.status_message }}"
          echo "üè∑Ô∏è  Teardown Mode: ${{ needs.validate-request.outputs.teardown_mode }}"
          echo "üåç Environment: ${{ github.event.inputs.environment }}"
          echo ""
          echo "üìä Phase Results:"
          echo "  Phase 1 (Coder): ${{ needs.teardown-coder.result || 'skipped' }}"
          echo "  Phase 2 (Infrastructure): ${{ needs.teardown-infrastructure.result || 'skipped' }}"
          echo ""
          echo "üí∞ Cost Impact:"
          echo "  Monthly Savings: ‚Ç¨${{ needs.analyze-impact.outputs.cost_savings || 'unknown' }}"
          echo "  Resources Cleaned: ${{ needs.analyze-impact.outputs.resource_count || 'unknown' }}"
          echo ""

          if [[ "${{ steps.evaluate.outputs.overall_status }}" == "success" ]]; then
            echo "üéâ Teardown Completed Successfully!"
            echo "  ‚Ä¢ All requested resources have been destroyed"
            echo "  ‚Ä¢ State files cleaned up"
            echo "  ‚Ä¢ Cost savings achieved"
          elif [[ "${{ steps.evaluate.outputs.overall_status }}" == "partial" ]]; then
            echo "‚ö†Ô∏è Partial Teardown Completed"
            echo "  ‚Ä¢ Some resources may still exist"
            echo "  ‚Ä¢ Check Scaleway console for orphaned resources"
            echo "  ‚Ä¢ Manual cleanup may be required"
          else
            echo "‚ùå Teardown Failed"
            echo "  ‚Ä¢ Some or all resources may still exist"
            echo "  ‚Ä¢ Check workflow logs for specific errors"
            echo "  ‚Ä¢ Manual intervention required"
          fi

  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [validate-request, teardown-summary, analyze-impact]
    if: always() && needs.validate-request.outputs.confirmed == 'true'
    permissions:
      contents: read  # Read repository information
      issues: write   # Create issues on teardown failure

    steps:
      - name: Notify Slack (if configured)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [[ -n "$SLACK_WEBHOOK_URL" ]]; then
            overall_status="${{ needs.teardown-summary.outputs.overall_status }}"
            environment="${{ github.event.inputs.environment }}"
            teardown_mode="${{ needs.validate-request.outputs.teardown_mode }}"
            cost_savings="${{ needs.analyze-impact.outputs.cost_savings }}"

            # Determine notification details
            if [[ "$overall_status" == "success" ]]; then
              color="good"
              emoji="üóëÔ∏è"
              text="Environment teardown completed successfully"
            elif [[ "$overall_status" == "partial" ]]; then
              color="warning"
              emoji="‚ö†Ô∏è"
              text="Environment teardown partially completed"
            else
              color="danger"
              emoji="‚ùå"
              text="Environment teardown failed"
            fi

            payload="{
              \"attachments\": [{
                \"color\": \"$color\",
                \"text\": \"$emoji $text\",
                \"fields\": [
                  {\"title\": \"Environment\", \"value\": \"$environment\", \"short\": true},
                  {\"title\": \"Mode\", \"value\": \"$teardown_mode\", \"short\": true},
                  {\"title\": \"Cost Savings\", \"value\": \"‚Ç¨$cost_savings/month\", \"short\": true},
                  {\"title\": \"Triggered by\", \"value\": \"${{ github.actor }}\", \"short\": true},
                  {\"title\": \"Repository\", \"value\": \"${{ github.repository }}\", \"short\": true}
                ]
              }]
            }"

            curl -X POST -H 'Content-type: application/json' \
              --data "$payload" "$SLACK_WEBHOOK_URL"
          else
            echo "Slack webhook not configured, skipping notification"
          fi

      - name: Create GitHub Issue on Teardown Failure
        if: needs.teardown-summary.outputs.overall_status == 'failure' || needs.teardown-summary.outputs.overall_status == 'partial'
        uses: actions/github-script@v7
        with:
          script: |
            const overallStatus = '${{ needs.teardown-summary.outputs.overall_status }}';
            const environment = '${{ github.event.inputs.environment }}';
            const teardownMode = '${{ needs.validate-request.outputs.teardown_mode }}';
            const coderResult = '${{ needs.teardown-coder.result || 'skipped' }}';
            const infraResult = '${{ needs.teardown-infrastructure.result || 'skipped' }}';

            const title = `Environment Teardown ${overallStatus === 'failure' ? 'Failed' : 'Incomplete'}: ${environment} environment`;
            const body = `## Environment Teardown ${overallStatus === 'failure' ? 'Failure' : 'Partial Success'} Report

            **Environment:** ${environment}
            **Teardown Mode:** ${teardownMode}
            **Overall Status:** ${overallStatus}
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            **Triggered by:** ${{ github.actor }}
            **Commit:** ${{ github.sha }}

            ## Teardown Results
            - **Phase 1 (Coder):** ${coderResult}
            - **Phase 2 (Infrastructure):** ${infraResult}

            ## ${overallStatus === 'failure' ? 'Failure Analysis' : 'Partial Success Details'}
            ${overallStatus === 'failure' ?
              'The environment teardown failed and resources may still exist in Scaleway.' :
              'Some components were successfully torn down, but others may still exist.'}

            ## Manual Cleanup Required
            1. **Check Scaleway Console:** Review all resources in the affected region
            2. **Resource Inventory:**
               - Kubernetes clusters: Look for clusters starting with "coder-${environment}"
               - Databases: Look for PostgreSQL instances with "coder-${environment}" prefix
               - Load Balancers: Check for LBs associated with the environment
               - Networks: Review VPCs and security groups
               - Storage: Check for persistent volumes and backups
            3. **Manual Deletion:** Remove any remaining resources manually
            4. **State Cleanup:** Verify state bucket contents and clean up if needed

            ## Prevention for Future
            - Consider using \`emergency_mode=true\` for stuck resources
            - Use \`force_cleanup=true\` to continue despite errors
            - Ensure proper resource tagging for easier identification

            ## Recovery Steps
            - **Retry Teardown:** Re-run this workflow with force options
            - **Manual Cleanup:** Use Scaleway console to remove remaining resources
            - **State Investigation:** Check state files for resource dependencies

            **Labels:** teardown-failure, cleanup-required, ${environment}`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['teardown-failure', 'cleanup-required', environment]
            });