name: Setup Terraform Backend

# This workflow ensures backend infrastructure exists and creates backend.tf files
# Reusable workflow for setting up remote Terraform state backend

on:
  workflow_call:
    inputs:
      bucket_name:
        description: 'Name of the bucket in object store that will hold Terraform state'
        required: false
        type: string
      environment:
        description: 'Environment to setup backend for'
        required: true
        type: string
      region:
        description: 'Scaleway region'
        required: false
        type: string
        default: 'fr-par'
      force_recreate:
        description: 'Force recreation of backend configuration'
        required: false
        type: boolean
        default: false
    outputs:
      backend_configured:
        description: 'Whether backend was successfully configured'
        value: ${{ jobs.setup-backend.outputs.backend_configured }}
      bucket_name:
        description: 'Name of the created/existing bucket'
        value: ${{ jobs.setup-backend.outputs.bucket_name }}
      backend_endpoint:
        description: 'S3-compatible endpoint URL'
        value: ${{ jobs.setup-backend.outputs.backend_endpoint }}

  workflow_dispatch:
    inputs:
      bucket_name:
        description: 'Name of the bucket in object store that will hold Terraform state'
        required: false
        type: string
      environment:
        description: 'Environment to setup backend for'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      region:
        description: 'Scaleway region'
        required: false
        type: choice
        options:
          - fr-par
          - nl-ams
          - pl-waw
        default: 'fr-par'
      force_recreate:
        description: 'Force recreation of backend configuration'
        required: false
        type: boolean
        default: false

env:
  TF_IN_AUTOMATION: true
  SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
  SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
  SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_DEFAULT_PROJECT_ID }}
  SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.SCW_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.SCW_SECRET_KEY }}

jobs:
  setup-backend:
    name: Setup Backend Infrastructure
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      backend_configured: ${{ steps.setup.outputs.backend_configured }}
      bucket_name: ${{ steps.setup.outputs.bucket_name }}
      backend_endpoint: ${{ steps.setup.outputs.backend_endpoint }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.12.0"
          terraform_wrapper: false

      - name: Setup Backend Infrastructure
        id: setup
        working-directory: backend-setup
        run: |
          environment="${{ inputs.environment }}"
          region="${{ inputs.region }}"
          force_recreate="${{ inputs.force_recreate }}"
          bucket_name="${{ inputs.bucket_name }}"

          echo "🔧 Setting up backend for environment: $environment"

          # Create terraform.tfvars for this environment
          cat > terraform.tfvars << EOF
          environment = "$environment"
          region = "$region"
          project_id = "$SCW_DEFAULT_PROJECT_ID"
          generate_backend_config = true
          managed_by = "github-actions"
          EOF

          if [[ -n "$bucket_name" ]]; then
            echo "bucket_name = \"$bucket_name\"" >> terraform.tfvars
          fi

          # Clean up any existing state if force_recreate is true
          if [[ "$force_recreate" == "true" ]]; then
            echo "🗑️ Force recreate enabled - cleaning up existing state"
            rm -rf .terraform .terraform.lock.hcl terraform.tfstate*
          fi

          # Initialize Terraform
          echo "📦 Initializing Terraform..."
          if ! terraform init; then
            echo "❌ Failed to initialize Terraform for $environment"
            exit 1
          fi

          # Apply the backend infrastructure
          echo "🚀 Applying backend infrastructure..."
          if terraform apply -auto-approve; then
            echo "✅ Backend infrastructure created/verified for $environment"

            # Extract outputs for GitHub Actions
            bucket_name=$(terraform output -raw bucket_name)
            s3_endpoint=$(terraform output -raw s3_endpoint)

            echo "📊 Outputs for $environment:"
            echo "  Bucket: $bucket_name"
            echo "  Endpoint: $s3_endpoint"

            echo "backend_configured=true" >> $GITHUB_OUTPUT
            echo "bucket_name=$bucket_name" >> $GITHUB_OUTPUT
            echo "backend_endpoint=$s3_endpoint" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to apply backend infrastructure for $environment"
            exit 1
          fi

      - name: Verify Backend Configuration
        run: |
          echo "🔍 Verifying generated backend configuration..."

          environment="${{ inputs.environment }}"
          backend_file="environments/$environment/backend.tf"

          if [[ -f "$backend_file" ]]; then
            echo "✅ Backend configuration created: $backend_file"

            # Test syntax
            cd "environments/$environment"
            if terraform init -backend=false > /dev/null 2>&1; then
              echo "✅ Backend configuration syntax valid"
            else
              echo "❌ Backend configuration syntax invalid"
              cat backend.tf
              exit 1
            fi
            cd - > /dev/null
          else
            echo "❌ Backend configuration missing: $backend_file"
            exit 1
          fi

      - name: Upload Backend Configuration
        uses: actions/upload-artifact@v4
        with:
          name: backend-config-${{ inputs.environment }}-${{ github.run_id }}
          path: |
            environments/${{ inputs.environment }}/backend.tf
          retention-days: 7

      - name: Summary
        run: |
          echo "🎉 Backend setup completed successfully!"
          echo
          echo "📊 Summary:"
          echo "  Environment: ${{ inputs.environment }}"
          echo "  Region: ${{ inputs.region }}"
          echo "  Bucket: ${{ steps.setup.outputs.bucket_name }}"
          echo "  Endpoint: ${{ steps.setup.outputs.backend_endpoint }}"
          echo "  Backend file: environments/${{ inputs.environment }}/backend.tf"
          echo
          echo "🚀 Backend infrastructure is ready for use!"