name: Setup Terraform Backend

# Reusable workflow for setting up remote Terraform state backend
# This workflow ensures backend infrastructure exists and creates backend.tf files

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to setup backend for'
        required: true
        type: string
      region:
        description: 'Scaleway region'
        required: false
        type: string
        default: 'fr-par'
      force_recreate:
        description: 'Force recreation of backend configuration'
        required: false
        type: boolean
        default: false
    outputs:
      backend_configured:
        description: 'Whether backend was successfully configured'
        value: ${{ jobs.setup-backend.outputs.backend_configured }}
      bucket_name:
        description: 'Name of the created/existing bucket'
        value: ${{ jobs.setup-backend.outputs.bucket_name }}
      backend_endpoint:
        description: 'S3-compatible endpoint URL'
        value: ${{ jobs.setup-backend.outputs.backend_endpoint }}

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to setup backend for'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
          - all
      region:
        description: 'Scaleway region'
        required: false
        type: choice
        options:
          - fr-par
          - nl-ams
          - pl-waw
        default: 'fr-par'
      force_recreate:
        description: 'Force recreation of backend configuration'
        required: false
        type: boolean
        default: false

env:
  TF_IN_AUTOMATION: true

jobs:
  setup-backend:
    name: Setup Backend Infrastructure
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Read repository code
    outputs:
      backend_configured: ${{ steps.configure.outputs.backend_configured }}
      bucket_name: ${{ steps.configure.outputs.bucket_name }}
      backend_endpoint: ${{ steps.configure.outputs.backend_endpoint }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.12.0"
          terraform_wrapper: false

      - name: Configure Scaleway Credentials
        env:
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          SCW_DEFAULT_PROJECT_ID: ${{ secrets.SCW_DEFAULT_PROJECT_ID }}
          SCW_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
        run: |
          echo "SCW_ACCESS_KEY=${SCW_ACCESS_KEY}" >> $GITHUB_ENV
          echo "SCW_SECRET_KEY=${SCW_SECRET_KEY}" >> $GITHUB_ENV
          echo "SCW_DEFAULT_PROJECT_ID=${SCW_DEFAULT_PROJECT_ID}" >> $GITHUB_ENV
          echo "SCW_DEFAULT_ORGANIZATION_ID=${SCW_DEFAULT_ORGANIZATION_ID}" >> $GITHUB_ENV

      - name: Validate Environment
        id: validate
        run: |
          environment="${{ inputs.environment }}"
          region="${{ inputs.region }}"

          # Validate environment
          if [[ ! "$environment" =~ ^(dev|staging|prod|all)$ ]]; then
            echo "❌ Invalid environment: $environment"
            exit 1
          fi

          # Validate region
          if [[ ! "$region" =~ ^(fr-par|nl-ams|pl-waw)$ ]]; then
            echo "❌ Invalid region: $region"
            exit 1
          fi

          echo "✅ Environment and region validation passed"
          echo "environment=$environment" >> $GITHUB_OUTPUT
          echo "region=$region" >> $GITHUB_OUTPUT

      - name: Check Existing Backend Configuration
        id: check-existing
        run: |
          environment="${{ steps.validate.outputs.environment }}"

          # Skip if environment is 'all' - will be handled in next step
          if [[ "$environment" == "all" ]]; then
            echo "checking_all_environments=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          env_dir="environments/$environment"
          backend_exists=false
          bucket_configured=false

          # Check if backend.tf exists
          if [[ -f "$env_dir/backend.tf" ]] && [[ "${{ inputs.force_recreate }}" != "true" ]]; then
            echo "📄 Backend configuration file exists: $env_dir/backend.tf"
            backend_exists=true

            # Extract bucket name from existing backend.tf
            if bucket_name=$(grep -o 'bucket = "[^"]*"' "$env_dir/backend.tf" | cut -d'"' -f2); then
              echo "🪣 Found bucket name: $bucket_name"
              echo "existing_bucket_name=$bucket_name" >> $GITHUB_OUTPUT
              bucket_configured=true
            fi
          fi

          echo "backend_exists=$backend_exists" >> $GITHUB_OUTPUT
          echo "bucket_configured=$bucket_configured" >> $GITHUB_OUTPUT

      - name: Generate Bucket Names
        id: bucket-names
        run: |
          environment="${{ steps.validate.outputs.environment }}"

          if [[ "$environment" == "all" ]]; then
            echo "dev_bucket=terraform-state-coder-dev" >> $GITHUB_OUTPUT
            echo "staging_bucket=terraform-state-coder-staging" >> $GITHUB_OUTPUT
            echo "prod_bucket=terraform-state-coder-prod" >> $GITHUB_OUTPUT
          else
            bucket_name="terraform-state-coder-$environment"
            echo "bucket_name=$bucket_name" >> $GITHUB_OUTPUT
          fi

      - name: Check Bucket Existence
        id: check-buckets
        run: |
          environment="${{ steps.validate.outputs.environment }}"
          region="${{ steps.validate.outputs.region }}"

          # Function to check if bucket exists using Terraform data source
          check_bucket_exists() {
            local bucket_name="$1"
            local temp_dir=$(mktemp -d)

            # Create a minimal Terraform config to check bucket existence
            cat > "$temp_dir/main.tf" << EOF
          terraform {
            required_providers {
              scaleway = {
                source  = "scaleway/scaleway"
                version = "~> 2.57"
              }
            }
          }

          provider "scaleway" {
            region = "$region"
          }

          # Use try() to gracefully handle non-existent buckets
          data "scaleway_object_bucket" "check" {
            count  = 1
            name   = "$bucket_name"
            region = "$region"
          }

          output "bucket_exists" {
            value = length(data.scaleway_object_bucket.check) > 0
          }

          output "bucket_endpoint" {
            value = length(data.scaleway_object_bucket.check) > 0 ? data.scaleway_object_bucket.check[0].endpoint : ""
          }
          EOF

            cd "$temp_dir"

            # Initialize terraform
            if ! terraform init -backend=false > /dev/null 2>&1; then
              echo "not_exists"
              echo ""
              rm -rf "$temp_dir"
              return
            fi

            # Try to plan and apply to check bucket existence
            if terraform plan > /dev/null 2>&1 && terraform apply -auto-approve > /dev/null 2>&1; then
              local exists=$(terraform output -raw bucket_exists 2>/dev/null || echo "false")
              local endpoint=$(terraform output -raw bucket_endpoint 2>/dev/null || echo "")

              if [[ "$exists" == "true" ]]; then
                echo "exists"
                echo "$endpoint"
              else
                echo "not_exists"
                echo ""
              fi
            else
              echo "not_exists"
              echo ""
            fi

            rm -rf "$temp_dir"
          }

          if [[ "$environment" == "all" ]]; then
            # Check all environment buckets
            for env in dev staging prod; do
              bucket_name="terraform-state-coder-$env"
              echo "🔍 Checking bucket: $bucket_name"

              result=$(check_bucket_exists "$bucket_name")
              status=$(echo "$result" | head -1)
              endpoint=$(echo "$result" | tail -1)

              echo "${env}_bucket_exists=$status" >> $GITHUB_OUTPUT
              if [[ "$status" == "exists" ]] && [[ -n "$endpoint" ]]; then
                echo "${env}_bucket_endpoint=$endpoint" >> $GITHUB_OUTPUT
              fi
            done
          else
            bucket_name="${{ steps.bucket-names.outputs.bucket_name }}"
            echo "🔍 Checking bucket: $bucket_name"

            result=$(check_bucket_exists "$bucket_name")
            status=$(echo "$result" | head -1)
            endpoint=$(echo "$result" | tail -1)

            echo "bucket_exists=$status" >> $GITHUB_OUTPUT
            if [[ "$status" == "exists" ]] && [[ -n "$endpoint" ]]; then
              echo "bucket_endpoint=$endpoint" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Create Backend Infrastructure
        id: create-infrastructure
        if: |
          steps.check-buckets.outputs.bucket_exists == 'not_exists' ||
          steps.check-buckets.outputs.dev_bucket_exists == 'not_exists' ||
          steps.check-buckets.outputs.staging_bucket_exists == 'not_exists' ||
          steps.check-buckets.outputs.prod_bucket_exists == 'not_exists'
        run: |
          environment="${{ steps.validate.outputs.environment }}"
          region="${{ steps.validate.outputs.region }}"

          echo "🏗️ Creating backend infrastructure for: $environment"

          # Function to create a single bucket using the shared backend-setup configuration
          create_bucket() {
            local env="$1"
            local temp_dir=$(mktemp -d)

            echo "📦 Creating bucket for environment: $env"

            # Copy the shared backend-setup configuration
            cp -r "$GITHUB_WORKSPACE/backend-setup"/* "$temp_dir/"

            # Create terraform.tfvars for environment-specific values
            cat > "$temp_dir/terraform.tfvars" << EOF
          environment = "$env"
          region      = "$region"
          project_id  = "$SCW_DEFAULT_PROJECT_ID"
          managed_by  = "github-actions"
          EOF

            cd "$temp_dir"

            # Initialize and apply with proper error handling
            echo "  Initializing Terraform..."
            if ! terraform init; then
              echo "❌ Failed to initialize Terraform for environment: $env"
              rm -rf "$temp_dir"
              return 1
            fi

            echo "  Planning infrastructure..."
            if ! terraform plan -out=plan.tfplan; then
              echo "❌ Failed to plan infrastructure for environment: $env"
              rm -rf "$temp_dir"
              return 1
            fi

            echo "  Applying infrastructure..."
            if terraform apply -auto-approve plan.tfplan; then
              echo "✅ Created backend infrastructure for environment: $env"

              # Store outputs for later use
              echo "${env}_bucket_name=$(terraform output -raw bucket_name)" >> $GITHUB_OUTPUT
              echo "${env}_s3_endpoint=$(terraform output -raw s3_endpoint)" >> $GITHUB_OUTPUT
            else
              echo "❌ Failed to create backend infrastructure for environment: $env"
              rm -rf "$temp_dir"
              return 1
            fi

            rm -rf "$temp_dir"
          }

          # Create buckets based on environment
          if [[ "$environment" == "all" ]]; then
            for env in dev staging prod; do
              if [[ "$(eval echo \${{ '${' }}steps.check-buckets.outputs.${env}_bucket_exists})" == "not_exists" ]]; then
                create_bucket "$env"
              fi
            done
          else
            if [[ "${{ steps.check-buckets.outputs.bucket_exists }}" == "not_exists" ]]; then
              create_bucket "$environment"
            fi
          fi

          echo "infrastructure_created=true" >> $GITHUB_OUTPUT
          echo "✅ Backend infrastructure creation completed"

      - name: Configure Backend Files
        id: configure
        run: |
          environment="${{ steps.validate.outputs.environment }}"
          region="${{ steps.validate.outputs.region }}"

          configure_single_environment() {
            local env="$1"
            local env_dir="environments/$env"
            local bucket_name="terraform-state-coder-$env"

            echo "📝 Configuring backend for environment: $env"

            # Generate backend.tf directly using known values
            cat > "$GITHUB_WORKSPACE/$env_dir/backend.tf" << EOF
          # Terraform Backend Configuration for Scaleway Object Storage
          # This file configures remote state storage for the $env environment
          # Auto-generated by GitHub Actions workflow

          terraform {
            backend "s3" {
              bucket = "$bucket_name"
              key    = "$env/terraform.tfstate"
              region = "$region"

              # Required flags for S3-compatible storage
              skip_credentials_validation = true
              skip_region_validation      = true
              skip_requesting_account_id  = true

              # Use endpoints block for better compatibility
              endpoints = {
                s3 = "https://s3.$region.scw.cloud"
              }

              # Note: State locking is not supported with Scaleway Object Storage
              # Team coordination should be handled through CI/CD pipelines
            }
          }
          EOF

            echo "✅ Backend configuration created: $env_dir/backend.tf"
            return 0
          }

          # Configure environments
          if [[ "$environment" == "all" ]]; then
            for env in dev staging prod; do
              configure_single_environment "$env"
            done
            echo "backend_configured=true" >> $GITHUB_OUTPUT
            echo "bucket_name=terraform-state-coder-{dev,staging,prod}" >> $GITHUB_OUTPUT
            echo "backend_endpoint=https://s3.$region.scw.cloud" >> $GITHUB_OUTPUT
          else
            configure_single_environment "$environment"
            echo "backend_configured=true" >> $GITHUB_OUTPUT
            echo "bucket_name=terraform-state-coder-$environment" >> $GITHUB_OUTPUT
            echo "backend_endpoint=https://s3.$region.scw.cloud" >> $GITHUB_OUTPUT
          fi

      - name: Upload Backend Configuration Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-config-${{ inputs.environment }}-${{ github.run_id }}
          path: |
            environments/*/backend.tf
          retention-days: 7

      - name: Validate Backend Configuration
        run: |
          environment="${{ steps.validate.outputs.environment }}"

          validate_environment() {
            local env="$1"
            local env_dir="environments/$env"

            echo "🔍 Validating backend configuration for: $env"

            # Check if environment directory exists
            if [[ ! -d "$env_dir" ]]; then
              echo "❌ Environment directory not found: $env_dir"
              return 1
            fi

            # Check if backend.tf was created
            if [[ ! -f "$env_dir/backend.tf" ]]; then
              echo "❌ Backend configuration file not found: $env_dir/backend.tf"
              return 1
            fi

            cd "$env_dir"

            # Initialize with verbose error output
            echo "  Initializing Terraform backend..."
            if terraform init 2>&1; then
              echo "✅ Backend initialization successful for $env"

              # Test backend connectivity by checking remote state
              echo "  Testing backend connectivity..."
              if terraform state list > /dev/null 2>&1; then
                echo "✅ Backend connectivity verified for $env"
              else
                echo "✅ Backend accessible for $env (no existing state - this is normal for new environments)"
              fi
            else
              echo "❌ Backend initialization failed for $env"
              echo "Backend configuration:"
              cat backend.tf
              return 1
            fi

            cd - > /dev/null
          }

          # Validate environments
          validation_failed=false
          if [[ "$environment" == "all" ]]; then
            for env in dev staging prod; do
              if ! validate_environment "$env"; then
                validation_failed=true
              fi
            done
          else
            if ! validate_environment "$environment"; then
              validation_failed=true
            fi
          fi

          if [[ "$validation_failed" == "true" ]]; then
            echo "❌ Backend validation failed for one or more environments"
            exit 1
          fi

          echo "✅ All backend configurations validated successfully"

      - name: Summary
        run: |
          echo "🎉 Backend setup completed successfully!"
          echo
          echo "📊 Summary:"
          echo "  Environment(s): ${{ inputs.environment }}"
          echo "  Region: ${{ inputs.region }}"
          echo "  Backend configured: ${{ steps.configure.outputs.backend_configured }}"
          echo "  Bucket(s): ${{ steps.configure.outputs.bucket_name }}"
          echo "  Endpoint: ${{ steps.configure.outputs.backend_endpoint }}"
          echo
          echo "✅ Remote state backend is now ready for use!"